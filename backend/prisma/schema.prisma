generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Form {
  id          String        @id @default(cuid())
  title       String
  description String?
  slug        String        @unique
  isActive    Boolean       @default(true)
  isPublic    Boolean       @default(false)
  publicUrl   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  versions    FormVersion[]
  responses   Response[]
  pages       PublicPage[]
  @@map("forms")
}

model PublicPage {
  id          String   @id @default(cuid())
  formId      String
  title       String
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  @@map("public_pages")
}

model FormVersion {
  id          String     @id @default(cuid())
  formId      String
  version     Int
  title       String
  description String?
  createdAt   DateTime   @default(now())
  form        Form       @relation(fields: [formId], references: [id], onDelete: Cascade)
  sections    Section[]
  @@unique([formId, version])
  @@map("form_versions")
}

model Section {
  id              String      @id @default(cuid())
  formVersionId   String
  title           String
  description     String?
  order           Int
  createdAt       DateTime    @default(now())
  formVersion     FormVersion @relation(fields: [formVersionId], references: [id], onDelete: Cascade)
  questions       Question[]
  @@map("sections")
}

model Question {
  id              String           @id @default(cuid())
  sectionId       String
  type            QuestionType
  text            String
  placeholder     String?
  helpText        String?
  isRequired      Boolean          @default(false)
  order           Int
  createdAt       DateTime         @default(now())
  section         Section          @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  options         QuestionOption[]
  answers         Answer[]
  @@map("questions")
}

enum QuestionType {
  TEXT
  TEXTAREA
  SELECT
  RADIO
  CHECKBOX
}

model QuestionOption {
  id          String   @id @default(cuid())
  questionId  String
  text        String
  order       Int
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers     Answer[]
  @@map("question_options")
}

model Response {
  id              String   @id @default(cuid())
  formId          String
  formVersionId   String?
  responseNumber  Int      @default(autoincrement())
  submittedAt     DateTime @default(now())
  ipAddress       String?
  userAgent       String?
  email           String?
  completedAt     DateTime?
  isComplete      Boolean  @default(false)
  form            Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  answers         Answer[]
  @@map("responses")
  @@index([formId, responseNumber])
}

model Answer {
  id              String          @id @default(cuid())
  responseId      String
  questionId      String
  textValue       String?
  createdAt       DateTime        @default(now())
  response        Response        @relation(fields: [responseId], references: [id], onDelete: Cascade)
  question        Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptions QuestionOption[]
  @@map("answers")
  @@unique([responseId, questionId])
  @@index([responseId])
  @@index([questionId])
}
